@* @page "/updateStudentData"
@using BlazorWebApi2.Models
@inject HttpClient HttpClient

<h3>Update Student Data</h3>

<form @onsubmit="UpdateStudent">
    <div class="form-group">
        <label for="studentId">Student ID:</label>
        <input type="text" class="form-control" id="updatedStudent.Student_ID" @bind="updatedStudent.Student_ID" placeholder="Enter Student_ID" />
    </div>
    <div class="form-group">
        <label for="gender">Gender:</label>
        <input type="text" class="form-control" @bind="updatedStudent.Gender" placeholder="Enter Gender" />
    </div>



    <div class="form-group">
        <label for="Nationlity">Nationlity</label>
        <input type="text" name="Nationlity" class="form-control" id="Nationlity" @bind="updatedStudent.Nationlity"
               placeholder="Enter Nationlity" />
    </div>

    <div class="form-group">
        <label for="PlaceOfBirth">PlaceOfBirth</label>
        <input type="text" name="PlaceOfBirth" class="form-control" id="PlaceOfBirth" @bind="updatedStudent.PlaceOfBirth"
               placeholder="Enter PlaceOfBirth" />
    </div>

    <div class="form-group">
        <label for="StageId">StageId</label>
        <input type="text" name="StageId" class="form-control" id="StageId" @bind="updatedStudent.StageID" placeholder="Enter StageId" />
    </div>
    <div class="form-group">
        <label for="GradeId">GradeId</label>
        <input type="text" name="GradeId" class="form-control" id="GradeId" @bind="updatedStudent.GradeID" placeholder="Enter GradeId" />
    </div>

    <div class="form-group">
        <label for="SectionId">SectionId</label>
        <input type="text" name="SectionId" class="form-control" id="SectionId" @bind="updatedStudent.SectionID"
               placeholder="Enter SectionId" />
    </div>

    <div class="form-group">
        <label for="Topic">Topic</label>
        <input type="text" name="Topic" class="form-control" id="Topic" @bind="updatedStudent.Topic" placeholder="Enter Topic" />
    </div>
    <div class="form-group">
        <label for="Semester">Semester </label>
        <input type="text" name="Semester" class="form-control" id="Semester" @bind="updatedStudent.Semester"
               placeholder="Enter Semester" />
    </div>

    <div class="form-group">
        <label for="Relation">Relation</label>
        <input type="text" name="Relation" class="form-control" id="Relation" @bind="updatedStudent.Relation"
               placeholder="Enter Relation" />
    </div>

    <div class="form-group">
        <label for="RaisedHands">RaisedHands</label>
        <input type="text" name="RaisedHands" class="form-control" id="RaisedHands" @bind="updatedStudent.RaisedHands"
               placeholder="Enter RaisedHands" />
    </div>

    <div class="form-group">
        <label for="VisitedResources">VisitedResources</label>
        <input type="text" name="VisitedResources" class="form-control" id="VisitedResources" @bind="updatedStudent.VisitedResources"
               placeholder="Enter VisitedResources" />
    </div>

    <div class="form-group">
        <label for="AnnouncementsView">AnnouncementsView</label>
        <input type="text" name="AnnouncementsView" class="form-control" id="AnnouncementsView" @bind="updatedStudent.AnnouncementsView"
               placeholder="Enter AnnouncementsView" />
    </div>

    <div class="form-group">
        <label for="Discussion ">Discussion</label>
        <input type="text" name="Discussion" class="form-control" id="Discussion" @bind="updatedStudent.Discussion"
               placeholder="Enter Discussion" />
    </div>

    <div class="form-group">
        <label for="ParentAnsweringSurvey">ParentAnsweringSurvey</label>
        <input type="text" name="ParentAnsweringSurvey" class="form-control" id="ParentAnsweringSurvey" @bind="updatedStudent.ParentAnsweringSurvey"
               placeholder="Enter ParentAnsweringSurvey" />
    </div>

    <div class="form-group">
        <label for="ParentschoolSatisfaction">ParentschoolSatisfaction</label>
        <input type="text" name="ParentschoolSatisfaction" class="form-control"
               id="ParentschoolSatisfaction" @bind="updatedStudent.ParentschoolSatisfaction" placeholder="Enter ParentschoolSatisfaction" />
    </div>

    <div class="form-group">
        <label for="StudentAbsenceDays ">StudentAbsenceDays </label>
        <input type="text" name="StudentAbsenceDays" class="form-control" id="StudentAbsenceDays" @bind="updatedStudent.StudentAbsenceDays"
               placeholder="Enter StudentAbsenceDays" />
    </div>

    <div class="form-group">
        <label for="StudentMarks ">StudentMarks </label>
        <input type="text" name="StudentMarks" class="form-control" id="StudentMarks" @bind="updatedStudent.StudentMarks"
               placeholder="Enter StudentMarks" />
    </div>
    <div class="form-group">
        <label for="Classes">Classes</label>
        <input type="text" name="Classes" class="form-control" id="Classes" @bind="updatedStudent.Classes" placeholder="Enter Classes" />
    </div>

    

    <button type="submit" class="btn btn-primary">Update</button>
</form>

@if (!string.IsNullOrEmpty(updateMessage))
{
    <div class="alert alert-success mt-3">@updateMessage</div>
}

@code {
    public Student updatedStudent { get; set; } = new Student();
    public string updateMessage { get; set; }

    private async Task UpdateStudent()
    {
        var response = await HttpClient.PutAsJsonAsync($"https://localhost:7214/api/Student/{updatedStudent.Student_ID}", updatedStudent);

        if (response.IsSuccessStatusCode)
        {
            updateMessage = "Student data updated successfully.";
        }
        else
        {
            updateMessage = "Error updating student data. Status Code: " + response.StatusCode;
        }
    }
}
 *@
















@page "/updateStudentData"
@using BlazorWebApi2.Models
@inject HttpClient HttpClient

<h3>Update Student Data</h3>

<div class="form-group">
    <label for="studentId">Enter Student ID:</label>
    <input type="text" class="form-control" id="studentId" @bind="studentId" />
    <button class="btn btn-primary" @onclick="CheckStudentId">Check Student ID</button>
</div>

@if (isStudentIdValid)
{
    <EditForm Model="@updatedStudent" OnValidSubmit="UpdateStudent">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="studentId">Student ID:</label>
            <input type="text" class="form-control" id="studentId" @bind="updatedStudent.Student_ID" placeholder="Enter Student_ID" />
        </div>
        <div class="form-group">
    <label for="gender">Gender:</label>
    <input type="text" class="form-control" @bind="updatedStudent.Gender" placeholder="Enter Gender" />
            <ValidationMessage For="@(() => updatedStudent.Gender)" />
</div>



<div class="form-group">
    <label for="Nationlity">Nationlity</label>
    <input type="text" name="Nationlity" class="form-control" id="Nationlity" @bind="updatedStudent.Nationlity"
           placeholder="Enter Nationlity" />
            <ValidationMessage For="@(() => updatedStudent.Nationlity)" />
</div>

<div class="form-group">
    <label for="PlaceOfBirth">PlaceOfBirth</label>
    <input type="text" name="PlaceOfBirth" class="form-control" id="PlaceOfBirth" @bind="updatedStudent.PlaceOfBirth"
           placeholder="Enter PlaceOfBirth" />
            <ValidationMessage For="@(() => updatedStudent.PlaceOfBirth)" />
</div>

<div class="form-group">
    <label for="StageId">StageId</label>
    <input type="text" name="StageId" class="form-control" id="StageId" @bind="updatedStudent.StageID" placeholder="Enter StageId" />
            <ValidationMessage For="@(() => updatedStudent.StageID)" />
</div>
<div class="form-group">
    <label for="GradeId">GradeId</label>
    <input type="text" name="GradeId" class="form-control" id="GradeId" @bind="updatedStudent.GradeID" placeholder="Enter GradeId" />
            <ValidationMessage For="@(() => updatedStudent.GradeID)" />
</div>

<div class="form-group">
    <label for="SectionId">SectionId</label>
    <input type="text" name="SectionId" class="form-control" id="SectionId" @bind="updatedStudent.SectionID"
           placeholder="Enter SectionId" />
            <ValidationMessage For="@(() => updatedStudent.SectionID)" />
                </div>

<div class="form-group">
    <label for="Topic">Topic</label>
    <input type="text" name="Topic" class="form-control" id="Topic" @bind="updatedStudent.Topic" placeholder="Enter Topic" />
            <ValidationMessage For="@(() => updatedStudent.Topic)" />
</div>
<div class="form-group">
    <label for="Semester">Semester </label>
    <input type="text" name="Semester" class="form-control" id="Semester" @bind="updatedStudent.Semester"
           placeholder="Enter Semester" />
            <ValidationMessage For="@(() => updatedStudent.Semester)" />
</div>

<div class="form-group">
    <label for="Relation">Relation</label>
    <input type="text" name="Relation" class="form-control" id="Relation" @bind="updatedStudent.Relation"
           placeholder="Enter Relation" />
            <ValidationMessage For="@(() => updatedStudent.Relation)" />
</div>

<div class="form-group">
    <label for="RaisedHands">RaisedHands</label>
    <input type="text" name="RaisedHands" class="form-control" id="RaisedHands" @bind="updatedStudent.RaisedHands"
           placeholder="Enter RaisedHands" />
            <ValidationMessage For="@(() => updatedStudent.RaisedHands)" />
</div>

<div class="form-group">
    <label for="VisitedResources">VisitedResources</label>
    <input type="text" name="VisitedResources" class="form-control" id="VisitedResources" @bind="updatedStudent.VisitedResources"
           placeholder="Enter VisitedResources" />
            <ValidationMessage For="@(() => updatedStudent.VisitedResources)" />
</div>

<div class="form-group">
    <label for="AnnouncementsView">AnnouncementsView</label>
    <input type="text" name="AnnouncementsView" class="form-control" id="AnnouncementsView" @bind="updatedStudent.AnnouncementsView"
           placeholder="Enter AnnouncementsView" />
            <ValidationMessage For="@(() => updatedStudent.AnnouncementsView)" />
</div>

<div class="form-group">
    <label for="Discussion ">Discussion</label>
    <input type="text" name="Discussion" class="form-control" id="Discussion" @bind="updatedStudent.Discussion"
           placeholder="Enter Discussion" />
            <ValidationMessage For="@(() => updatedStudent.Discussion)" />
</div>

<div class="form-group">
    <label for="ParentAnsweringSurvey">ParentAnsweringSurvey</label>
    <input type="text" name="ParentAnsweringSurvey" class="form-control" id="ParentAnsweringSurvey" @bind="updatedStudent.ParentAnsweringSurvey"
           placeholder="Enter ParentAnsweringSurvey" />
            <ValidationMessage For="@(() => updatedStudent.ParentAnsweringSurvey)" />
</div>

<div class="form-group">
    <label for="ParentschoolSatisfaction">ParentschoolSatisfaction</label>
    <input type="text" name="ParentschoolSatisfaction" class="form-control"
           id="ParentschoolSatisfaction" @bind="updatedStudent.ParentschoolSatisfaction" placeholder="Enter ParentschoolSatisfaction" />
            <ValidationMessage For="@(() => updatedStudent.ParentschoolSatisfaction)" />
</div>

<div class="form-group">
    <label for="StudentAbsenceDays ">StudentAbsenceDays </label>
    <input type="text" name="StudentAbsenceDays" class="form-control" id="StudentAbsenceDays" @bind="updatedStudent.StudentAbsenceDays"
           placeholder="Enter StudentAbsenceDays" />
            <ValidationMessage For="@(() => updatedStudent.StudentAbsenceDays)" />
</div>

<div class="form-group">
    <label for="StudentMarks ">StudentMarks </label>
    <input type="text" name="StudentMarks" class="form-control" id="StudentMarks" @bind="updatedStudent.StudentMarks"
           placeholder="Enter StudentMarks" />
            <ValidationMessage For="@(() => updatedStudent.StudentMarks)" />
</div>
<div class="form-group">
    <label for="Classes">Classes</label>
    <input type="text" name="Classes" class="form-control" id="Classes" @bind="updatedStudent.Classes" placeholder="Enter Classes" />
            <ValidationMessage For="@(() => updatedStudent.Classes)" />
</div>

        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}
else if (showErrorMessage)
{
    <div class="alert alert-danger mt-3">Invalid Student ID. Please check and try again.</div>
}

@if (!string.IsNullOrEmpty(updateMessage))
{
    <div class="alert alert-success mt-3">@updateMessage</div>
}

@code {
    public Student updatedStudent { get; set; } = new Student();
    public string updateMessage { get; set; }
    public string studentId { get; set; }
    public bool isStudentIdValid { get; set; } = false;
    public bool showErrorMessage { get; set; } = false;

    private async Task CheckStudentId()
    {
        // Assume GetStudentFromApi is a method that fetches student data from your API
        var student = await GetStudentFromApi(studentId);

        if (student != null)
        {
            updatedStudent = student;
            isStudentIdValid = true;
            showErrorMessage = false;
        }
        else
        {
            isStudentIdValid = false;
            showErrorMessage = true;
        }
    }

    private async Task UpdateStudent()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"https://localhost:7214/api/Student/{updatedStudent.Student_ID}", updatedStudent);

            if (response.IsSuccessStatusCode)
            {
                updateMessage = "Student data updated successfully.";
            }
            else
            {
                updateMessage = "Error updating student data. Status Code: " + response.StatusCode;
                var responseContent = await response.Content.ReadAsStringAsync();
                updateMessage += ". Response content: " + responseContent;
            }
        }
        catch (Exception ex)
        {
            updateMessage = "An error occurred: " + ex.Message;
        }
    }

    // Example of GetStudentFromApi method
    private async Task<Student> GetStudentFromApi(string studentId)
    {
        try
        {
            var response = await HttpClient.GetAsync($"https://localhost:7214/api/Student/{studentId}");

            if (response.IsSuccessStatusCode)
            {
                var student = await response.Content.ReadFromJsonAsync<Student>();
                return student;
            }
            else
            {
                return null;
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., network error, API error)
            return null;
        }
    }
}
                                  